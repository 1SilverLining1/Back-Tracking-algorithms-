//https://practice.geeksforgeeks.org/problems/solve-the-sudoku/0



#include <bits/stdc++.h>
using namespace std;
int row =9 , col =9 ; 
int M [ 9 ] [ 9 ] ; 
void print()
{
        for ( int i = 0 ; i < row; i ++ )
        {
            for ( int j = 0 ; j < col ; j ++ )
            {
                cout <<  M [ i ] [ j ] << " "; 
            }
            //cout << endl ; 
        }
        cout << endl ; 
}
bool FindEmpty( int & r , int & c )
{
    for ( int i = 0 ; i < row ; i ++ )
    {
        for ( int j = 0 ; j < col ; j ++ )
        {
            if ( M [ i ] [ j ] == 0 )
            {
                r = i ; 
                c = j ; 
                return 1 ; 
            }
        }
    }
    return 0 ; 
}

bool ColSafe ( int c , int n )
{
      for ( int i = 0 ; i < row ; i ++ )
        if ( M [ i ] [ c ] == n ) 
        	return 0 ; 
    
    return 1 ;
}

bool RowSafe ( int  r , int n )
{
    
    for ( int i = 0 ; i < col ; i ++ )
        if ( M [ r ] [ i ] == n ) 
        	return 0 ; 
    
    return 1 ;
}

bool GridSafe ( int r, int c , int n )
{
    
    r = ( r / 3 ) * 3 ; 
    c = ( c / 3 ) * 3 ; 
    
    for ( int i = r ; i < r + 3 ; i ++ )
    {
        for ( int j = c ; j < c + 3 ; j ++ )
        {
             if ( M [ i ] [ j ] == n ) 
        	return 0 ; 
        }
    }
    
    return 1 ; 
}
bool IsSafe( int r , int c  , int n )
{
    
    return ColSafe( c , n ) && RowSafe ( r , n ) && GridSafe( r , c , n ) ; 
}


int SolveSudoku ()
{
    int r = 0 , c= 0 ; 
    if ( FindEmpty(r , c ) ==0 )
        return 1 ; 
        
    for ( int i = 1 ; i <= 9 ; i ++ )
    {
        if ( IsSafe( r , c , i ) )
        {
            
            M [ r ] [ c ] = i ; 
            if ( SolveSudoku() )
                return 1 ; 
            M [ r ] [ c ] = 0 ; 
        }
    }
    
    return 0 ; 
}
int main() {
    
    
    int T ; 
    cin >> T ; 
    while ( T-- )
    {
        for ( int i = 0 ; i < row; i ++ )
        {
            for ( int j = 0 ; j < col  ; j ++ )
            {
                cin >> M [ i ] [ j ] ; 
            }
        }
        
        if ( SolveSudoku () ) 
            print() ;
        
    }
	return 0;
}
