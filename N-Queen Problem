//https://practice.geeksforgeeks.org/problems/n-queen-problem/0

#include <bits/stdc++.h>
using namespace std;
typedef long long ll ; 
//typedef cout << "Checking"  check ; 
int n ; 
int M [ 101 ] [ 101 ] ; 
int ans [ 101 ] ; 

bool Colcheck ( int row , int col )
{
    for ( int i = 0 ; i < row ; i ++ ) // change. 
        if ( ans [ i ] == col )
            return 0 ; 
        
    return 1 ; 
}

bool RighDiaCheck ( int row , int col )
{
    int i = row , j = col ; 
    while ( i >= 0 and j >= 0 )
    {
        if ( M [ i ] [ j ] )
            return 0 ; 
        j -- ; i -- ; 
    }
    return 1 ; 
}


bool LeftDiaCheck ( int row , int col )
{
    int i = row , j = col ; 
    while ( i >= 0 and j < n  )
    {
        if ( M [ i ] [ j ] )
            return 0 ; 
        j ++; i -- ; 
    }
    return 1 ;
}
bool IsValid ( int row , int col )
{
    return Colcheck( row , col ) and RighDiaCheck( row , col ) and LeftDiaCheck ( row , col);
}

void build ( int x )
{
    
    if ( x == n  )
    {
        
      cout << "[" ; 
       for ( int i = 0 ; i < n ; i ++ )
        cout << ans [ i ] + 1 << " " ;
      cout << "] " ; 
        return ; 
    }
    //cout << x << " " ; 
    for ( int col  = 0 ; col < n ;  col ++)
    {
        if ( IsValid ( x  , col  ) )
        {
            //cout << "cool" << endl ; 
            //cout << x << " " << col << endl ; 
            M [ x ] [ col ] = 1 ;
            ans [ x ] = col ; 
            build ( x + 1 ) ; 
            M [ x ] [ col ] = 0 ;
            ans [ x ] = 0 ; 
        }
    }
    
}
int main() {
    
    
    int  T ; 
    cin >> T ; 
    while ( T-- )
    {
        cin >> n ; 
        if ( n == 1  )
        {
            cout << "[1 ]" << endl ; 
            continue ; 
        }
        if ( n < 4 )
        {
            cout << -1 << endl ; 
            continue ; 
        }
        
        memset ( M , 0 , sizeof ( M ) ) ;
        memset ( ans , -1 , sizeof ( ans ) ) ; 
        build ( 0 ) ;
        cout << endl ; 
    }
	//code
	return 0;
}
