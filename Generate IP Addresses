//https://practice.geeksforgeeks.org/problems/generate-ip-addresses/1

vector < string > v ; 
set < string > ss ; 
bool IsValid ( string s )
{
        if ( s [ 0 ] == '0' and s.length()!= 1  )
            return 0 ;
        if ( s.length() == 3 and s [ 0 ] > '2' )
            return 0 ; 
        if ( s.length() == 3 and s [ 0 ] == '2' and s [ 1 ] > '5' ) 
            return 0 ; 
        if ( s.length() == 3 and s [ 0 ] == '2' and s [ 1 ] == '5' and s [ 2 ] > '5'  )
            return 0 ; 
            
        return 1 ; 
}
void  cal ( string s , int part , int index  , string ip , int n )
{
    
    
    
    if ( part == 0 and index < n )
        return ; 
    if ( part == 0 )
    { 
       
        ss.insert  ( ip ) ; 
        return ; 
    }
    if ( index >= n )
        return  ; 
    string temp = s.substr ( index , 1 ) ; 
    string ipp;  
    if ( IsValid ( temp ) ) 
    {
        if ( !ip.empty() )
                ipp = ip + '.' + temp ;
        else 
                ipp = temp ; 
        cal ( s , part - 1 , index + 1  ,  ipp , n ) ;
    }
   
    if ( index + 1 < n  )
    {
        string temp = s.substr ( index  , 2 ) ; 
          
        if ( IsValid ( temp ) ) 
        {
            if ( !ip.empty() )
            ipp = ip + '.' + temp ;
           else 
            ipp = temp ; 
            cal ( s , part - 1 , index + 2 , ipp , n ) ;
        }
    
    }  
      
    if ( index + 2 < n  )
    {
        string temp = s.substr ( index  , 3 ) ;
        
        if ( IsValid ( temp ) ) 
        {
            if ( !ip.empty() )
                ipp = ip + '.' + temp ;
            else 
                ipp = temp ; 
            cal ( s , part - 1 , index +  3 , ipp , n  ) ;
        }
     
    } 
    
}

vector<string> genIp(string s)
{
    
    
    v.clear() ; 
    ss.clear() ; 
    int n = s.length() ; 
    string ip ; 
    cal ( s , 4 ,0   ,ip , n ) ; 

    for ( auto i : ss )
    {
        //cout << i << endl ; ; 
        v.push_back ( i ) ;
    }
    return v ; 
}
