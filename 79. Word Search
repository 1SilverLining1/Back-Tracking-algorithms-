//https://leetcode.com/problems/word-search/
class Solution {
public:
    
    
    vector < vector < char > > M ;  
    int n , m , len  ; 
    string s ; 
    int visit [ 201] [ 201] ;
    bool  util ( int row , int col , int index , string temp )
    {
        
            if ( temp ==  s ) 
                return 1 ; 
            if ( row < 0 or row >= n or col < 0 or col >= m or index >= len or M [ row ][ col ] != s [ index ] or visit [ row] [ col ] )
                return 0 ;
            
            visit [ row] [ col ] = 1 ; 
            temp += M [ row ] [ col ] ;
                
            
            bool ans =
                    util (  row + 1 , col     , index + 1 ,  temp ) or 
                    util (  row     , col - 1 , index + 1 ,  temp ) or
                    util (  row     , col + 1 , index + 1 ,  temp ) or
                    util (  row - 1 , col     , index + 1 ,  temp )  ;
        
           visit [ row] [ col ] = 0 ; 
           return ans ; 

    }

    bool exist(vector<vector<char>>& board, string word) 
    {
        
        
            s = word ; 
            M = board ; 
            n = board . size() ; 
            m = board[ 0 ].size() ; 
            len = word.length() ; 
          // cout << n << " " << m << " " << s << " " << len << endl ; 
            for ( int i = 0 ; i < n ;i ++ )
            {
                for ( int j = 0 ; j  < m ; j ++ )
                {
                    
                    if ( util ( i , j , 0 , ""  ) )
                            return 1 ; 

                }
            }

           return 0 ;
    }
        
    
 };
